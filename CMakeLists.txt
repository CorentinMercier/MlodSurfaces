cmake_minimum_required(VERSION 3.12)
project(MLSCUDA LANGUAGES CXX CUDA)

# Dependencies
# -------------------------------------------------------------------------------------------------
find_package(Qt5 COMPONENTS Widgets OpenGL REQUIRED)
find_package(OpenGL REQUIRED)
find_package(OpenMP)
add_subdirectory(lib/glad)

# Source files
# -------------------------------------------------------------------------------------------------
file(GLOB_RECURSE source_files sources/*.cpp sources/*.h)
file(GLOB_RECURSE gpu_source_files sources/apss/Fastapss.cu)
QT5_WRAP_CPP(MOC_GENERATED sources/interface/mainwindow.h sources/interface/widgetopengl.h sources/interface/sliderWindow.h sources/interface/parameters.h sources/interface/kernels.h)
QT5_WRAP_UI(UI_GENERATED sources/interface/mainwindow.ui sources/interface/sliderWindow.ui sources/interface/parameters.ui sources/interface/kernels.ui)
source_group(TREE ${CMAKE_CURRENT_LIST_DIR} FILES ${source_files} ${UI_GENERATED} ${MOC_GENERATED} ${gpu_source_files})

# MLoDS main target
# -------------------------------------------------------------------------------------------------
set(CUDA_ARCHITECTURE "" CACHE STRING "CUDA gencode(s) (flags for nvcc) to use when compiling *.cu files")
add_executable(MLoDS ${source_files} ${UI_GENERATED} ${MOC_GENERATED} ${gpu_source_files})
target_compile_features(MLoDS PUBLIC cxx_std_11)
target_include_directories(MLoDS
	PUBLIC lib/glm
	PUBLIC lib/eigen
	PUBLIC ${CMAKE_CURRENT_BINARY_DIR} # ui & moc files will be generated here
)
set_target_properties(MLoDS PROPERTIES
	VS_DEBUGGER_WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/bin
	RUNTIME_OUTPUT_DIRECTORY      $<1:${CMAKE_CURRENT_LIST_DIR}/bin>
)

# convert the fpic option in Qt5::Core over to INTERFACE_POSITION_INDEPENDENT_CODE
# -------------------------------------------------------------------------------------------------
if ( TARGET Qt5::Core )
	get_property( core_options TARGET Qt5::Core PROPERTY INTERFACE_COMPILE_OPTIONS )
	string( REPLACE "-fPIC" "" new_core_options "${core_options}" )
	set_property( TARGET Qt5::Core PROPERTY INTERFACE_COMPILE_OPTIONS ${new_core_options} )
	set_property( TARGET Qt5::Core PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE "ON" )
	set( CMAKE_CXX_COMPILE_OPTIONS_PIE "-fPIC" )
endif()

target_link_libraries(MLoDS
	PUBLIC OpenGL::GL
	PUBLIC OpenGL::GLU
	PUBLIC Qt5::Widgets
	PUBLIC Qt5::OpenGL
	PUBLIC OpenMP::OpenMP_CXX
	PUBLIC glad
)

# Extra flags to fine-tune the compilation
# -------------------------------------------------------------------------------------------------
if(NOT MSVC)
	# Not using target_compile_options here, as it would pass the flags to nvcc,
	# and this would result in a compile error. This is ugly, but necessary...
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native -no-pie")# -Werror -Wno-error=int-in-bool-context -Wall -Wno-int-in-bool-context #Options used to remove warnings, those remaining are due to tinyply
endif()

# CUDA options
# -------------------------------------------------------------------------------------------------
if (gpu_source_files)
	set_target_properties(MLoDS PROPERTIES
		CUDA_STANDARD 11
		CUDA_STANDARD_REQUIRED ON
		CUDA_SEPARABLE_COMPILATION ON)

	# Automatically select the CUDA architecture of the computer we're compiling on
	if(NOT CUDA_ARCHITECTURE)
		find_package(CUDA)
		target_include_directories(MLoDS PUBLIC ${CUDA_INCLUDE_DIRS})
		cuda_select_nvcc_arch_flags(CUDA_ARCHITECTURE)
	endif()

	# Notes:
	#   - Optimization flags: -dlcm=cg -maxrregcount=10000  --ftz --prec-dic --prec-sqrt
	list(APPEND cuda_options
		${CUDA_ARCHITECTURE}                                           # Selected gencode(s)
		-lcudadevrt                                                    # Link to the CUDA device runtime
		-lineinfo                                                      # Generate line-number information for device code
		#-use_fast_math                                                # Make use of fast math library
		-Xptxas -O3                                                    # Pass -O3 (optimize) to the PTX assembler
		-Xcudafe --diag_suppress=esa_on_defaulted_function_ignored     # To remove warnings due to using GLM and CUDA
	)

	# Fine-tune the compilation of the C++ code generated by nvcc
	if(NOT MSVC)
		list(APPEND cuda_options
			-Xcompiler -rdynamic # Pass -rdynamic to C++ compiler
		)
	endif()

	string(JOIN " " cuda_options ${cuda_options})
	set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} ${cuda_options}")
endif()
